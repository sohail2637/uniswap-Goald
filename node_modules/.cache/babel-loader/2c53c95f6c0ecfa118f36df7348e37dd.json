{"ast":null,"code":"var _jsxFileName = \"/home/sohail/uniswap-interface/src/pages/Swap/index.tsx\";\nimport { JSBI, Token } from '@uniswap/sdk';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { ArrowDown } from 'react-feather';\nimport ReactGA from 'react-ga';\nimport { Text } from 'rebass';\nimport { ThemeContext } from 'styled-components';\nimport AddressInputPanel from '../../components/AddressInputPanel';\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button';\nimport Card, { GreyCard } from '../../components/Card';\nimport Column, { AutoColumn } from '../../components/Column';\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { SwapPoolTabs } from '../../components/NavigationTabs';\nimport { AutoRow, RowBetween } from '../../components/Row';\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown';\nimport BetterTradeLink, { DefaultVersionLink } from '../../components/swap/BetterTradeLink';\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee';\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds';\nimport TradePrice from '../../components/swap/TradePrice';\nimport TokenWarningModal from '../../components/TokenWarningModal';\nimport ProgressSteps from '../../components/ProgressSteps';\nimport SwapHeader from '../../components/swap/SwapHeader';\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants';\nimport { getTradeVersion } from '../../data/V1';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency, useAllTokens } from '../../hooks/Tokens';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress';\nimport { useSwapCallback } from '../../hooks/useSwapCallback';\nimport useToggledVersion, { DEFAULT_VERSION, Version } from '../../hooks/useToggledVersion';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useExpertModeManager, useUserSlippageTolerance, useUserSingleHopOnly } from '../../state/user/hooks';\nimport { LinkStyledButton, TYPE } from '../../theme';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices';\nimport AppBody from '../AppBody';\nimport { ClickableText } from '../Pool/styleds';\nimport Loader from '../../components/Loader';\nimport { useIsTransactionUnsupported } from 'hooks/Trades';\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter';\nimport { isTradeBetter } from 'utils/trades';\nexport default function Swap() {\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP;\n\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []); // dismiss warning if all imported tokens are in active lists\n\n  const defaultTokens = useAllTokens();\n  const importTokensNotInDefault = urlLoadedTokens && urlLoadedTokens.filter(token => {\n    return !Boolean(token.address in defaultTokens);\n  });\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION];\n  const betterTradeLinkV2 = toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade) ? Version.v2 : undefined;\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const [singleHopOnly] = useUserSingleHopOnly();\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: 'Swap',\n        action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol, getTradeVersion(trade)].join('/')\n      });\n      ReactGA.event({\n        category: 'Routing',\n        action: singleHopOnly ? 'Swap with multihop disabled' : 'Swap with multihop enabled'\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, showConfirm, recipient, recipientAddress, account, trade, singleHopOnly]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies === null || currencies === void 0 ? void 0 : currencies.INPUT, currencies === null || currencies === void 0 ? void 0 : currencies.OUTPUT);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TokenWarningModal, {\n    isOpen: importTokensNotInDefault.length > 0 && !dismissTokenWarning,\n    tokens: importTokensNotInDefault,\n    onConfirm: handleConfirmTokenWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SwapPoolTabs, {\n    active: 'swap',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SwapHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    id: \"swap-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmSwapModal, {\n    isOpen: showConfirm,\n    trade: trade,\n    originalTrade: tradeToConfirm,\n    onAcceptChanges: handleAcceptChanges,\n    attemptingTxn: attemptingTxn,\n    txHash: txHash,\n    recipient: recipient,\n    allowedSlippage: allowedSlippage,\n    onConfirm: handleSwap,\n    swapErrorMessage: swapErrorMessage,\n    onDismiss: handleConfirmDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: 'md',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    showMaxButton: !atMaxAmountInput,\n    currency: currencies[Field.INPUT],\n    onUserInput: handleTypeInput,\n    onMax: handleMaxInput,\n    onCurrencySelect: handleInputSelect,\n    otherCurrency: currencies[Field.OUTPUT],\n    id: \"swap-currency-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: isExpertMode ? 'space-between' : 'center',\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    onClick: () => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n      onSwitchTokens();\n    },\n    color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 19\n    }\n  })), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"add-recipient-button\",\n    onClick: () => onChangeRecipient(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 19\n    }\n  }, \"+ Add a send (optional)\") : null)), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    value: formattedAmounts[Field.OUTPUT],\n    onUserInput: handleTypeOutput,\n    label: independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To',\n    showMaxButton: false,\n    currency: currencies[Field.OUTPUT],\n    onCurrencySelect: handleOutputSelect,\n    otherCurrency: currencies[Field.INPUT],\n    id: \"swap-currency-output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }), recipient !== null && !showWrap ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: \"space-between\",\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"remove-recipient-button\",\n    onClick: () => onChangeRecipient(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 19\n    }\n  }, \"- Remove send\")), /*#__PURE__*/React.createElement(AddressInputPanel, {\n    id: \"recipient\",\n    value: recipient,\n    onChange: onChangeRecipient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  })) : null, showWrap ? null : /*#__PURE__*/React.createElement(Card, {\n    padding: showWrap ? '.25rem 1rem 0 1rem' : '0px',\n    borderRadius: '20px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"8px\",\n    style: {\n      padding: '0 16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 17\n    }\n  }, Boolean(trade) && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 23\n    }\n  }, \"Price\"), /*#__PURE__*/React.createElement(TradePrice, {\n    price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n    showInverted: showInverted,\n    setShowInverted: setShowInverted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 23\n    }\n  })), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 23\n    }\n  }, \"Slippage Tolerance\"), /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 23\n    }\n  }, allowedSlippage / 100, \"%\"))))), /*#__PURE__*/React.createElement(BottomGrouping, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 11\n    }\n  }, swapIsUnsupported ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 17\n    }\n  }, \"Unsupported Asset\")) : !account ? /*#__PURE__*/React.createElement(ButtonLight, {\n    onClick: toggleWalletModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 15\n    }\n  }, \"Connect Wallet\") : showWrap ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: Boolean(wrapInputError),\n    onClick: onWrap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 15\n    }\n  }, wrapInputError !== null && wrapInputError !== void 0 ? wrapInputError : wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/React.createElement(GreyCard, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 17\n    }\n  }, \"Insufficient liquidity for this trade.\"), singleHopOnly && /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 35\n    }\n  }, \"Try enabling multi-hop trades.\")) : showApproveFlow ? /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonConfirmed, {\n    onClick: approveCallback,\n    disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n    width: \"48%\",\n    altDisabledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n    ,\n    confirmed: approval === ApprovalState.APPROVED,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }, approval === ApprovalState.PENDING ? /*#__PURE__*/React.createElement(AutoRow, {\n    gap: \"6px\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 21\n    }\n  }, \"Approving \", /*#__PURE__*/React.createElement(Loader, {\n    stroke: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 33\n    }\n  })) : approvalSubmitted && approval === ApprovalState.APPROVED ? 'Approved' : 'Approve ' + ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol)), /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    width: \"48%\",\n    id: \"swap-button\",\n    disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n    error: isValid && priceImpactSeverity > 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 19\n    }\n  }, priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`))) : /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    id: \"swap-button\",\n    disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n    error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 20,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 17\n    }\n  }, swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)), showApproveFlow && /*#__PURE__*/React.createElement(Column, {\n    style: {\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ProgressSteps, {\n    steps: [approval === ApprovalState.APPROVED],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 17\n    }\n  })), isExpertMode && swapErrorMessage ? /*#__PURE__*/React.createElement(SwapCallbackError, {\n    error: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 49\n    }\n  }) : null, betterTradeLinkV2 && !swapIsUnsupported && toggledVersion === Version.v1 ? /*#__PURE__*/React.createElement(BetterTradeLink, {\n    version: betterTradeLinkV2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 15\n    }\n  }) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? /*#__PURE__*/React.createElement(DefaultVersionLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 15\n    }\n  }) : null))), !swapIsUnsupported ? /*#__PURE__*/React.createElement(AdvancedSwapDetailsDropdown, {\n    trade: trade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(UnsupportedCurrencyFooter, {\n    show: swapIsUnsupported,\n    currencies: [currencies.INPUT, currencies.OUTPUT],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/home/sohail/uniswap-interface/src/pages/Swap/index.tsx"],"names":["JSBI","Token","React","useCallback","useContext","useEffect","useMemo","useState","ArrowDown","ReactGA","Text","ThemeContext","AddressInputPanel","ButtonError","ButtonLight","ButtonPrimary","ButtonConfirmed","Card","GreyCard","Column","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","BetterTradeLink","DefaultVersionLink","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","TradePrice","TokenWarningModal","ProgressSteps","SwapHeader","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useActiveWeb3React","useCurrency","useAllTokens","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useSwapCallback","useToggledVersion","DEFAULT_VERSION","Version","useWrapCallback","WrapType","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSlippageTolerance","useUserSingleHopOnly","LinkStyledButton","TYPE","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","ClickableText","Loader","useIsTransactionUnsupported","UnsupportedCurrencyFooter","isTradeBetter","Swap","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","handleConfirmTokenWarning","defaultTokens","importTokensNotInDefault","token","Boolean","address","account","theme","toggleWalletModal","toggleSettings","isExpertMode","allowedSlippage","independentField","typedValue","recipient","v1Trade","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","recipientAddress","toggledVersion","tradesByVersion","v1","v2","trade","undefined","defaultTrade","betterTradeLinkV2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","singleHopOnly","handleSwap","then","hash","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","handleOutputSelect","outputCurrency","swapIsUnsupported","length","padding","primary1","text2","executionPrice","WRAP","UNWRAP","textAlign","marginTop"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from '@uniswap/sdk'\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\nimport Card, { GreyCard } from '../../components/Card'\nimport Column, { AutoColumn } from '../../components/Column'\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\nimport { AutoRow, RowBetween } from '../../components/Row'\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\nimport BetterTradeLink, { DefaultVersionLink } from '../../components/swap/BetterTradeLink'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\nimport TradePrice from '../../components/swap/TradePrice'\nimport TokenWarningModal from '../../components/TokenWarningModal'\nimport ProgressSteps from '../../components/ProgressSteps'\nimport SwapHeader from '../../components/swap/SwapHeader'\n\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { getTradeVersion } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency, useAllTokens } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\nimport useENSAddress from '../../hooks/useENSAddress'\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\nimport useToggledVersion, { DEFAULT_VERSION, Version } from '../../hooks/useToggledVersion'\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/swap/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState\n} from '../../state/swap/hooks'\nimport { useExpertModeManager, useUserSlippageTolerance, useUserSingleHopOnly } from '../../state/user/hooks'\nimport { LinkStyledButton, TYPE } from '../../theme'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\nimport AppBody from '../AppBody'\nimport { ClickableText } from '../Pool/styleds'\nimport Loader from '../../components/Loader'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport { isTradeBetter } from 'utils/trades'\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch()\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId)\n  ]\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens()\n  const importTokensNotInDefault =\n    urlLoadedTokens &&\n    urlLoadedTokens.filter((token: Token) => {\n      return !Boolean(token.address in defaultTokens)\n    })\n\n  const { account } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu()\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo()\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue\n  )\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  const { address: recipientAddress } = useENSAddress(recipient)\n  const toggledVersion = useToggledVersion()\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  }\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion]\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION]\n\n  const betterTradeLinkV2: Version | undefined =\n    toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade) ? Version.v2 : undefined\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount\n      }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n      }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  const route = trade?.route\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then(hash => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n\n        ReactGA.event({\n          category: 'Swap',\n          action:\n            recipient === null\n              ? 'Swap w/o Send'\n              : (recipientAddress ?? recipient) === account\n              ? 'Swap w/o Send + recipient'\n              : 'Swap w/ Send',\n          label: [\n            trade?.inputAmount?.currency?.symbol,\n            trade?.outputAmount?.currency?.symbol,\n            getTradeVersion(trade)\n          ].join('/')\n        })\n\n        ReactGA.event({\n          category: 'Routing',\n          action: singleHopOnly ? 'Swap with multihop disabled' : 'Swap with multihop enabled'\n        })\n      })\n      .catch(error => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined\n        })\n      })\n  }, [\n    priceImpactWithoutFee,\n    swapCallback,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade,\n    singleHopOnly\n  ])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  const handleInputSelect = useCallback(\n    inputCurrency => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n    },\n    [onCurrencySelection]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\n  }, [maxAmountInput, onUserInput])\n\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [\n    onCurrencySelection\n  ])\n\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies?.INPUT, currencies?.OUTPUT)\n\n  return (\n    <>\n      <TokenWarningModal\n        isOpen={importTokensNotInDefault.length > 0 && !dismissTokenWarning}\n        tokens={importTokensNotInDefault}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <SwapPoolTabs active={'swap'} />\n      <AppBody>\n        <SwapHeader />\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={'md'}>\n            <CurrencyInputPanel\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\n                      onSwitchTokens()\n                    }}\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2}\n                  />\n                </ArrowWrapper>\n                {recipient === null && !showWrap && isExpertMode ? (\n                  <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To'}\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null && !showWrap ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              </>\n            ) : null}\n\n            {showWrap ? null : (\n              <Card padding={showWrap ? '.25rem 1rem 0 1rem' : '0px'} borderRadius={'20px'}>\n                <AutoColumn gap=\"8px\" style={{ padding: '0 16px' }}>\n                  {Boolean(trade) && (\n                    <RowBetween align=\"center\">\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                        Price\n                      </Text>\n                      <TradePrice\n                        price={trade?.executionPrice}\n                        showInverted={showInverted}\n                        setShowInverted={setShowInverted}\n                      />\n                    </RowBetween>\n                  )}\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                    <RowBetween align=\"center\">\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        Slippage Tolerance\n                      </ClickableText>\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        {allowedSlippage / 100}%\n                      </ClickableText>\n                    </RowBetween>\n                  )}\n                </AutoColumn>\n              </Card>\n            )}\n          </AutoColumn>\n          <BottomGrouping>\n            {swapIsUnsupported ? (\n              <ButtonPrimary disabled={true}>\n                <TYPE.main mb=\"4px\">Unsupported Asset</TYPE.main>\n              </ButtonPrimary>\n            ) : !account ? (\n              <ButtonLight onClick={toggleWalletModal}>Connect Wallet</ButtonLight>\n            ) : showWrap ? (\n              <ButtonPrimary disabled={Boolean(wrapInputError)} onClick={onWrap}>\n                {wrapInputError ??\n                  (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n              </ButtonPrimary>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: 'center' }}>\n                <TYPE.main mb=\"4px\">Insufficient liquidity for this trade.</TYPE.main>\n                {singleHopOnly && <TYPE.main mb=\"4px\">Try enabling multi-hop trades.</TYPE.main>}\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonConfirmed\n                  onClick={approveCallback}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                  width=\"48%\"\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                  confirmed={approval === ApprovalState.APPROVED}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <AutoRow gap=\"6px\" justify=\"center\">\n                      Approving <Loader stroke=\"white\" />\n                    </AutoRow>\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                    'Approved'\n                  ) : (\n                    'Approve ' + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonConfirmed>\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap()\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined\n                      })\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap()\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined\n                    })\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                </Text>\n              </ButtonError>\n            )}\n            {showApproveFlow && (\n              <Column style={{ marginTop: '1rem' }}>\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n              </Column>\n            )}\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n            {betterTradeLinkV2 && !swapIsUnsupported && toggledVersion === Version.v1 ? (\n              <BetterTradeLink version={betterTradeLinkV2} />\n            ) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? (\n              <DefaultVersionLink />\n            ) : null}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n      {!swapIsUnsupported ? (\n        <AdvancedSwapDetailsDropdown trade={trade} />\n      ) : (\n        <UnsupportedCurrencyFooter show={swapIsUnsupported} currencies={[currencies.INPUT, currencies.OUTPUT]} />\n      )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}